testalpine:
  box:
    id: alpine:3.9
    volumes: $testDir:/foo
    env:
      testDir: $testDir    
  services: 
    - name: nginx1
      id: nginx:1.15.10
    - name: nginx2
      id: nginx:1.15.10
  steps:
    - script: 
        name: Test env vars 
        code: |
            if [ "$http_proxy" != "$expected_http_proxy_1" ]; then 
                echo "Unexpected http_proxy at check 1: expected=$expected_http_proxy_1 actual=$http_proxy"
                exit 1
            fi     
            if [ "$no_proxy" != "$expected_no_proxy_1" ]; then 
                echo "Unexpected no_proxy at check 1: expected=$expected_no_proxy_1 actual=$no_proxy"
                exit 1
            fi  
            if [ "$HTTP_PROXY" != "$expected_HTTP_PROXY_1" ]; then 
                echo "Unexpected http_proxy at check 1: expected=$expected_HTTP_PROXY_1 actual=$HTTP_PROXY"
                exit 1
            fi     
            if [ "$NO_PROXY" != "$expected_NO_PROXY_1" ]; then 
                echo "Unexpected NO_PROXY at check 1: expected=$expected_NO_PROXY_1 actual=$NO_PROXY"
                exit 1
            fi                                
    - script:
        name: Install Curl
        code: |
            # disable any pretend proxy and restore any real proxy 
            export saved_http_proxy=$http_proxy
            export http_proxy=$real_http_proxy
            export saved_HTTP_PROXY=$HTTP_PROXY
            export HTTP_PROXY=$REAL_HTTP_PROXY            
            apk --no-cache add curl     
            export http_proxy=$saved_http_proxy
            export HTTP_PROXY=$saved_HTTP_PROXY
    - script:
        name: Connect to nginx1
        code: curl nginx1
    - script:
        name: Connect to nginx2
        code: curl nginx2               
    - internal/docker-run:
        image: nginx:1.15.10
        name: nginx3        
    - script:
        name: Connect to nginx3
        code: curl nginx3        
    - script: 
        name: Test env vars 2
        code: |
            if [ "$http_proxy" != "$expected_http_proxy_2" ]; then 
                echo "Unexpected http_proxy at check 2: expected=$expected_http_proxy_2 actual=$http_proxy"
                exit 1
            fi     
            if [ "$no_proxy" != "$expected_no_proxy_2" ]; then 
                echo "Unexpected no_proxy at check 2: expected=$expected_no_proxy_2 actual=$no_proxy"
                exit 1
            fi  
            if [ "$HTTP_PROXY" != "$expected_HTTP_PROXY_2" ]; then 
                echo "Unexpected HTTP_PROXY at check 2: expected=$expected_HTTP_PROXY_2 actual=$HTTP_PROXY"
                exit 1
            fi     
            if [ "$NO_PROXY" != "$expected_NO_PROXY_2" ]; then 
                echo "Unexpected NO_PROXY at check 2: expected=$expected_NO_PROXY_2 actual=$NO_PROXY"
                exit 1
            fi              
    - internal/docker-run:
        image: nginx:1.15.10
        name: nginx4   
    - script:
        name: Connect to nginx4
        code: curl nginx4        
    - script: 
        name: Test env vars 3
        code: |
            if [ "$http_proxy" != "$expected_http_proxy_3" ]; then 
                echo "Unexpected http_proxy at check 3: expected=$expected_http_proxy_3 actual=$http_proxy"
                exit 1
            fi     
            if [ "$no_proxy" != "$expected_no_proxy_3" ]; then 
                echo "Unexpected no_proxy at check 3: expected=$expected_no_proxy_3 actual=$no_proxy"
                exit 1
            fi     
            if [ "$HTTP_PROXY" != "$expected_HTTP_PROXY_3" ]; then 
                echo "Unexpected HTTP_PROXY at check 3: expected=$expected_HTTP_PROXY_3 actual=$HTTP_PROXY"
                exit 1
            fi     
            if [ "$NO_PROXY" != "$expected_NO_PROXY_3" ]; then 
                echo "Unexpected NO_PROXY at check 3: expected=$expected_NO_PROXY_3 actual=$NO_PROXY"
                exit 1
            fi                                          
  after-steps: 
    - script: 
        name: Test env vars 4
        code: |
            if [ "$http_proxy" != "$expected_http_proxy_4" ]; then 
                echo "Unexpected http_proxy at check 4: expected=$expected_http_proxy_4 actual=$http_proxy"
                # failed aftersteps don't fail the build, so we have to signal failure by creating a file
                touch /foo/failed                  
                exit 1
            fi     
            if [ "$no_proxy" != "$expected_no_proxy_4" ]; then 
                echo "Unexpected no_proxy at check 4: expected=$expected_no_proxy_4 actual=$no_proxy"
                # failed aftersteps don't fail the build, so we have to signal failure by creating a file
                touch /foo/failed  
                exit 1
            fi   
            if [ "$HTTP_PROXY" != "$expected_HTTP_PROXY_4" ]; then 
                echo "Unexpected HTTP_PROXY at check 4: expected=$expected_HTTP_PROXY_4 actual=$HTTP_PROXY"
                # failed aftersteps don't fail the build, so we have to signal failure by creating a file
                touch /foo/failed  
                exit 1
            fi     
            if [ "$NO_PROXY" != "$expected_NO_PROXY_4" ]; then 
                echo "Unexpected NO_PROXY at check 4: expected=$expected_NO_PROXY_4 actual=$NO_PROXY"
                # failed aftersteps don't fail the build, so we have to signal failure by creating a file
                touch /foo/failed  
                exit 1
            fi  
# pipeline testubuntu is identical to testalpine except for the box and the commands to install curl                       
testubuntu:
  box:
    # This image is ubuntu with curl installed
    id: tutum/curl:trusty
    volumes: $testDir:/foo
    env:
      testDir: $testDir    
  services: 
    - name: nginx1
      id: nginx:1.15.10
    - name: nginx2
      id: nginx:1.15.10
  steps:
    - script: 
        name: Test env vars 
        code: |
            if [ "$http_proxy" != "$expected_http_proxy_1" ]; then 
                echo "Unexpected http_proxy at check 1: expected=$expected_http_proxy_1 actual=$http_proxy"
                exit 1
            fi     
            if [ "$no_proxy" != "$expected_no_proxy_1" ]; then 
                echo "Unexpected no_proxy at check 1: expected=$expected_no_proxy_1 actual=$no_proxy"
                exit 1
            fi  
            if [ "$HTTP_PROXY" != "$expected_HTTP_PROXY_1" ]; then 
                echo "Unexpected http_proxy at check 1: expected=$expected_HTTP_PROXY_1 actual=$HTTP_PROXY"
                exit 1
            fi     
            if [ "$NO_PROXY" != "$expected_NO_PROXY_1" ]; then 
                echo "Unexpected NO_PROXY at check 1: expected=$expected_NO_PROXY_1 actual=$NO_PROXY"
                exit 1
            fi                                
    - script:
        name: Connect to nginx1
        code: curl nginx1
    - script:
        name: Connect to nginx2
        code: curl nginx2               
    - internal/docker-run:
        image: nginx:1.15.10
        name: nginx3        
    - script:
        name: Connect to nginx3
        code: curl nginx3        
    - script: 
        name: Test env vars 2
        code: |
            if [ "$http_proxy" != "$expected_http_proxy_2" ]; then 
                echo "Unexpected http_proxy at check 2: expected=$expected_http_proxy_2 actual=$http_proxy"
                exit 1
            fi     
            if [ "$no_proxy" != "$expected_no_proxy_2" ]; then 
                echo "Unexpected no_proxy at check 2: expected=$expected_no_proxy_2 actual=$no_proxy"
                exit 1
            fi  
            if [ "$HTTP_PROXY" != "$expected_HTTP_PROXY_2" ]; then 
                echo "Unexpected HTTP_PROXY at check 2: expected=$expected_HTTP_PROXY_2 actual=$HTTP_PROXY"
                exit 1
            fi     
            if [ "$NO_PROXY" != "$expected_NO_PROXY_2" ]; then 
                echo "Unexpected NO_PROXY at check 2: expected=$expected_NO_PROXY_2 actual=$NO_PROXY"
                exit 1
            fi              
    - internal/docker-run:
        image: nginx:1.15.10
        name: nginx4   
    - script:
        name: Connect to nginx4
        code: curl nginx4        
    - script: 
        name: Test env vars 3
        code: |
            if [ "$http_proxy" != "$expected_http_proxy_3" ]; then 
                echo "Unexpected http_proxy at check 3: expected=$expected_http_proxy_3 actual=$http_proxy"
                exit 1
            fi     
            if [ "$no_proxy" != "$expected_no_proxy_3" ]; then 
                echo "Unexpected no_proxy at check 3: expected=$expected_no_proxy_3 actual=$no_proxy"
                exit 1
            fi     
            if [ "$HTTP_PROXY" != "$expected_HTTP_PROXY_3" ]; then 
                echo "Unexpected HTTP_PROXY at check 3: expected=$expected_HTTP_PROXY_3 actual=$HTTP_PROXY"
                exit 1
            fi     
            if [ "$NO_PROXY" != "$expected_NO_PROXY_3" ]; then 
                echo "Unexpected NO_PROXY at check 3: expected=$expected_NO_PROXY_3 actual=$NO_PROXY"
                exit 1
            fi                                          
  after-steps: 
    - script: 
        name: Test env vars 4
        code: |
            if [ "$http_proxy" != "$expected_http_proxy_4" ]; then 
                echo "Unexpected http_proxy at check 4: expected=$expected_http_proxy_4 actual=$http_proxy"
                # failed aftersteps don't fail the build, so we have to signal failure by creating a file
                touch /foo/failed                  
                exit 1
            fi     
            if [ "$no_proxy" != "$expected_no_proxy_4" ]; then 
                echo "Unexpected no_proxy at check 4: expected=$expected_no_proxy_4 actual=$no_proxy"
                # failed aftersteps don't fail the build, so we have to signal failure by creating a file
                touch /foo/failed  
                exit 1
            fi   
            if [ "$HTTP_PROXY" != "$expected_HTTP_PROXY_4" ]; then 
                echo "Unexpected HTTP_PROXY at check 4: expected=$expected_HTTP_PROXY_4 actual=$HTTP_PROXY"
                # failed aftersteps don't fail the build, so we have to signal failure by creating a file
                touch /foo/failed  
                exit 1
            fi     
            if [ "$NO_PROXY" != "$expected_NO_PROXY_4" ]; then 
                echo "Unexpected NO_PROXY at check 4: expected=$expected_NO_PROXY_4 actual=$NO_PROXY"
                # failed aftersteps don't fail the build, so we have to signal failure by creating a file
                touch /foo/failed  
                exit 1
            fi     